.question-container {
  background-color: var(--primary-gray);
  border-radius: 10px;
  width: 112rem;
}

.question-area {
  padding: 1rem 2rem;
}

.question-area h1 {
  font-size: 3rem;
}

.description-container {
  padding: 0rem 4rem;
  margin-bottom: 4rem;
}

.question-container > button {
  border-radius: 0 0 10px 10px;
  width: 100%;
  border: solid 2px var(--borders-color);
  background-color: var(--secondary-gray);
  padding: .8rem;
}

.responses-container {
  /* background-color: var(--primary-gray); */
  margin: 0 2.2rem;
  border-left: 4px solid rgba(78, 78, 78, 0.5);
}

.responses-area {
  display: flex;
  flex-direction: column;
  gap: 2.3rem;
}

.response {
  display: flex;
  flex-direction: row;
  gap: 1rem;
}

.response > p {
  font-family: "Poppins", sans-serif;
  font-weight: 400;
  font-size: 2.4rem;
}

.post-response-form {
  display: flex;
  flex-direction: row;
  width: 100%;
  margin: 2rem 0;
}

.floating-placeholder-input {
  position: relative;
  width: 100%;
}

.floating-placeholder-input *{ 
  font-family: "Poppins", sans-serif;
  font-weight: 400;
}

.floating-placeholder-input input {
  border: 4px solid rgba(78, 78, 78, 0.5);
  height: 6rem;
  background-color: var(--secondary-gray);
  width: 99rem;
  padding: 0 2rem;
  font-size: 2rem;
  outline: none;

}

.floating-placeholder-input span {
  position: absolute;
  pointer-events: none;
  left: 2rem;
  font-size: 2.5rem;
  top: 1.25rem;
  opacity: 0.5;

  transition: 0.3s;
}

.floating-placeholder-input input:focus ~ span, 
.floating-placeholder-input input:valid ~ span {
  transform: translateY(-3.7rem);
  font-size: 1.8rem;
  opacity: 1;
}

.post-response-form > button {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  background-color: var(--secondary-gray);
  border: 4px solid rgba(78, 78, 78, 0.5);
  border-radius: 0 10px 10px 0;
  font-size: 1.2rem;
  width: 100%;
}

#loading-icon {
  animation: spin 1s linear infinite; /* Altere a duração ou a velocidade conforme necessário */
}
#retract {
  animation: rotateToRetract 0.5s linear forwards;
}

#expand {
  animation: rotateToExpand 0.5s linear forwards;
}

@keyframes spin {
  from {transform: rotate(0deg);}
  to {transform: rotate(360deg);}
}

@keyframes rotateToRetract {
  from {transform: rotate(0deg);}
  to {transform: rotate(180deg);}
}

@keyframes rotateToExpand {
  from {transform: rotate(180deg);}
  to {transform: rotate(0deg);}
}